# Docker Compose configuration for Google News Scraper - Development Environment
# Multi-service architecture with PostgreSQL, Redis, and Celery

services:
  # Database migration service (runs once)
  migration:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: alembic upgrade head
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://postgres:postgres@postgres:5432/google_news}
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./src/database/migrations:/app/src/database/migrations:ro
    networks:
      - app-network

  # React Frontend Application
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://web:8000
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  # FastAPI Web Application
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://postgres:postgres@postgres:5432/google_news}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATABASE_ECHO=false
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: celery -A src.core.scheduler.celery_app worker --loglevel=debug --pool=threads --concurrency=1
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://postgres:postgres@postgres:5432/google_news}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - C_FORCE_ROOT=1
      - ENABLE_JAVASCRIPT_RENDERING=true
      - PLAYWRIGHT_BROWSERS_PATH=/home/worker/.cache/ms-playwright
      - PYTHONUNBUFFERED=1
      - CELERY_TASK_ALWAYS_EAGER=False
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "celery", "-A", "src.core.scheduler.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - app-network

  # Celery Beat Scheduler
  beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: celery -A src.core.scheduler.celery_app beat --loglevel=debug
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://postgres:postgres@postgres:5432/google_news}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - C_FORCE_ROOT=1
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
      - beat_data:/app/data/beat
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-google_news}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres:/var/lib/postgresql/data_backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-google_news}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - app-network
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache/Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./data/redis:/data_backup
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - app-network
    command: >
      redis-server
      --maxmemory 200mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # Nginx Reverse Proxy (optional for development)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - with-nginx  # Use with: docker-compose --profile with-nginx up

  # Celery Flower Monitoring (optional for development)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: celery -A src.core.scheduler.celery_app flower --port=5555 --address=0.0.0.0
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - C_FORCE_ROOT=1
    depends_on:
      - redis
      - worker
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring  # Use with: docker-compose --profile monitoring up

# Persistent volumes for data storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  beat_data:
    driver: local

# Internal network for service communication
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16